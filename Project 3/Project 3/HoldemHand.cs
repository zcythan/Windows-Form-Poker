using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Project_3
{
    internal class HoldemHand : IComparable<HoldemHand>
    { 
        public Card[] cards { get; private set; }
        public int handStatus { get; private set; }
        public int kicker { get; private set; }
        public int rank { get; private set; }

        public void reDraw()
        {
            foreach (Card c in cards)
            {
                c.genCard();
            }
        }

        public HoldemHand() 
        {
            cards = new Card[] { new Card(), new Card() };

        }

        private int greatToLeast(Card a, Card b)
        {
            return b.CompareTo(a);
        }
        //Method to generate 21 PokerHand objects each with a unique 5 card set given a master hand and current cards.

        //Citation: For loop structure of this method was generated by ChatGPT.
        //Prompt:  I have an array containing 7 parameters.
        //         I want to generate all possible combinations of this array algorithmically into arrays of 5 parameters. im using c#
        //I'm actually kinda surprised how simple this is, literally just iterating through for each term of the result array. 
        //Original answer from Chat GPT was also using an int array, I just borrowed the for loop framework, everything else was changed.
        public void genHands(PokerHand master)
        {
            List<PokerHand> allGens = new List<PokerHand>();
            Card[] masterHand = cards.Concat(master.hand).ToArray();

            for (int i = 0; i < masterHand.Length; i++)
            {
                for (int j = i + 1; j < masterHand.Length; j++)
                {
                    for (int k = j + 1; k < masterHand.Length; k++)
                    {
                        for (int l = k + 1; l < masterHand.Length; l++)
                        {
                            for (int m = l + 1; m < masterHand.Length; m++)
                            {
                                Card[] tempCards = { masterHand[i], masterHand[j], masterHand[k], masterHand[l], masterHand[m] };
                                PokerHand temp = new PokerHand(tempCards);
                                allGens.Add(temp);
                            }
                        }
                    }
                }
            }
            //find best value in list.
            allGens.Sort((a, b) => b.CompareTo(a)); //sort descending.
            handStatus = allGens[0].handStatus;
            rank = allGens[0].rank;
            Array.Sort(cards, greatToLeast);
            bool found = false;
            foreach (Card c in master.hand) //if both cards in master, then make it false again.
            {
                if (cards[0].value == c.value)
                {
                    found = true;   
                }
                if (cards[1].value == c.value && found)
                {
                    found = false; break;
                }
            }
            if (found)
            {
                kicker = cards[1].value;
            }
            else
            {
                kicker = cards[0].value;
            }
        
        }

        public int CompareTo(HoldemHand? other)
        {
            if (other != null)
            {
                if (handStatus > other.handStatus) return 1;
                else if (handStatus < other.handStatus) return -1;
                else
                {
                    if (rank > other.rank) return 1;
                    else if (rank < other.rank) return -1;
                    else
                    { 
                        if (kicker > other.kicker) return 1;
                        else if (kicker < other.kicker) return -1;
                        return 0;
                    }
                }
            }
            else
            {
                return -1;
            }
        }

    }
}
